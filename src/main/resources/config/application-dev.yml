# ===================================================================
# Spring Boot configuration for the "dev" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
    ROOT: DEBUG
    tech.jhipster: DEBUG
    org.hibernate.SQL: DEBUG
    com.sibs.geonames: DEBUG

spring:
  devtools:
    restart:
      enabled: true
      additional-exclude: static/**
    livereload:
      enabled: false # we use Webpack dev server + BrowserSync for livereload
  jackson:
    serialization:
      indent-output: true
  messages:
    cache-duration: PT1S # 1 second, see the ISO 8601 standard
  thymeleaf:
    cache: false
  sleuth:
    sampler:
      probability: 1 # report 100% of traces
  zipkin: # Use the "zipkin" Maven profile to have the Spring Cloud Zipkin dependencies
    base-url: http://localhost:9411
    enabled: false
    locator:
      discovery:
        enabled: true

server:
  #port: 8085
  port: 8443
  ssl:
    key-store: classpath:config/tls/keystore.p12
    key-store-password: 123456
    keyStoreType: PKCS12
    keyAlias: geoname
    ciphers: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
    enabled-protocols: TLSv1.2

  http2:
    enabled: true
# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  # CORS is disabled by default on microservices, as you should access them through a gateway.
  # If you want to enable it, please uncomment the configuration below.
  # cors:
  #   allowed-origins: "http://localhost:9000"
  #   allowed-methods: "*"
  #   allowed-headers: "*"
  #   exposed-headers: "Authorization,Link,X-Total-Count"
  #   allow-credentials: true
  #   max-age: 1800

  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
        base64-secret: ODU3OTA0MDMyNGU4NWZmNmYzOGYyNzY5ZWZlZjk5MzRkMjYyOTIzMDZkMzAzZjMzNjkxNzZhNmVkNjM5ZmMxMTQ1NmVlZTg1N2Y1ZjRhMTQ4ODcyZmMxNDE4NzYwZGFlYWE1Zjc5MzBjZjlkZmE5MzU2MWM5ZTI5NjE3NmVhZTA=
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      queue-size: 512
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:

app:
  sources:
    countryInfo:
      url: 'http://api.geonames.org/countryInfoJSON?formatted={formatted}&lang={lang}&country={country}&username={username}&style={style}'
      uriVariables:
        formatted: 'true'
        lang: 'pt'
        username: 'viewer'
        style: 'full'
      headers:
        Content-Type: 'application/json'

    countryInfoDetails:
      url: 'http://api.geonames.org/searchJSON?q={q}&lang={lang}&country={country}&username={username}'
      uriVariables:
        q: 'PCLI'
        lang: 'pt'
        username: 'viewer'
      headers:
        Content-Type: 'application/json'

    capitalInfo:
      url: 'http://api.geonames.org/searchJSON?q={q}&lang={lang}&country={country}&username={username}'
      uriVariables:
        q: 'PPLC'
        lang: 'pt'
        username: 'viewer'
      headers:
        Content-Type: 'application/json'

    getIcao:
      url: 'http://api.geonames.org/findNearByWeatherJSON?lat={lat}&lng={lng}&username={username}'
      uriVariables:
        lng: '${capitalInfo.geonames[0].lng}'
        lat: '${capitalInfo.geonames[0].lat}'
        username: 'viewer'
      headers:
        Content-Type: 'application/json'

  destiny:
    countryInfo:
      body:
        countryCode: '${countryInfo.geonames[0].countryCode}'
        countryName: '${countryInfo.geonames[0].countryName}'
        capital: '${countryInfo.geonames[0].capital}'
        language: '${countryInfo.geonames[0].languages.split(",")[0]}'
        currency: '${countryInfo.geonames[0].currencyCode}'
        population: '${countryInfo.geonames[0].population}'
        icao: '${getIcao.weatherObservation.ICAO}'
        lng: '${countryInfoDetails.geonames[0].lng}'
        lat: '${countryInfoDetails.geonames[0].lat}'
